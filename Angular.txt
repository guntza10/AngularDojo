Angular
-Angular มี app module ที่เป็น root module (main module) อย่างน้อย 1 module (module เป็น feature ต่างๆของ angular)
-แต่ละ module เป็น component กับ service
 -> component เป็นส่วนของ view
    -> angular app จะมี component อย่างน้อย 1 ตัว ที่เป็น root component(main component)
    -> ทุกๆ component จะอยู่ใน root component
    -> แต่ละ component จะมี html(view),class(control logic)
    -> มี service ที่จัดการกับ back end
-angular app จะมีได้หลาย module
 -> แต่ละ module จะมีได้หลาย component ,service
 -> module สามารถ import , export ได้


Package.json จะมีพวก library , module ที่ angular app ใช้
 -> จะ install เมื่อเรา run ng new (ตอนสร้าง Project) รวมถึง node_module


src folder
-main.ts เป็น entry point(จุดเริ่มต้น) ของ angular app
-app folder
 -> app.module.ts เป็น root module
 -> app.component.ts เป็น root component

เมื่อรัน ng serve 
-มันจะมาที่ main.ts จะมี bootstrap kick start ไปที่ app.module 
 -> ใน app module ก็จะมี bootstrap kick start ไปที่ app.component
    -> จะมี html,class
        -> class จะมี logic หรือ data สำหรับ view
-index.html เป็น main template (ที่มี app.component)
-เวลาจะใช้ component อื่น เอามาใช้ใน app.component(ที่เป็น root component ของ angular)

Component 
-Template(view) -> html
-Class(logic+data+method) -> typescript
-Metadata(information) -> ใช้บอกว่าเป็น particular class หรือ regular class ใน component
    -> จะมี decorator(function ที่จัดการข้อมูลเกี่ยวกับ class ของ component) ที่เป็น feature ที่ใช้ใน Typescript (ดูตัวอย่างใน app.component.ts)
    -> metadata templateUrl ที่อ้างอิงไฟล์ html สามารถใช้ property template ที่อ้างอิง tag html ได้โดยตรง (ดูตัวอย่างใน test.component.ts)
        -> ใช้ `` escape key ครอบ ถ้าจะทำเป็น multiple line
    -> metadata styleUrls สามารถใช้ styles แทนได้เหมือนข้างบน
-ทุกครั้งที่สร้าง component จะมีการการ Import component class ให้ auto ใน app.module
-ทุก component เอามาใช้ภายใต้ app.component(root component)
note : เวลาสร้าง component จะมี spec ไฟล์สำหรับ test(ไม่จำเป็นสามารถลบได้)
-เราสามารถ define selector ของ component ได้ 3 วิธี (ดูตัวอย่างที่ test.component.html)
    -> กำหนดชื่อ tag 
    -> กำหนดให้เป็น class css
    -> กำหนดให้เป็น attribute 

Interpolation => syntax{{}} (ดูตัวอย่างที่ binding.component.ts)
-คือการ binding data จาก component class สู่ component template(view)
-ไม่สามารถ define ตัวแปรได้ เช่น a = 2+2
-ไม่สามารถใช้ global javascript variable ได้ เช่น window ,screen 
note : interpolation มีข้อจำกัดที่สามารถใช้งานได้แค่กับ string value เท่านั้น ใช้กับ attribute ที่เป็น boolean ไม่ได้

Property Binding -> คือการ binding data ให้ attribute ที่เป็น boolean only? (ดูตัวอย่างที่ binding.component.ts)
-attribute ที่เป็น boolean 
    -> ไม่สามารถไปเปลี่ยนแปลงค่ามันได้ด้วย string value ("true" or "false")
        ->เช่น disabled (เปลี่ยนแปลงค่าที่เป็น string value ไม่มีผล disabled = "false" เพราะมันต้องการ true or false ที่เป็น boolean)
-ใช้กับ attribute ได้หมด แต่นิยมใช้กับ attribute ที่เป็น boolean เนื่องจากข้อจำกัดที่กล่าวไปข้างต้น
note : syntax [] or bind-ชื่อของ attribute

Class Binding
-> binding class css ว่าจะใช้หรือไม่ใช้ (ดูตัวอย่างที่ binding.component.ts)
-> ngClass คือการ set object ให้ binding class โดยที่เราไม่ต้องไป set หลายครั้ง set เป็น object รอบเดียวจบ (set multiple class)
-> รับค่าเป็น boolean

Style Binding
-> binding style css property
-> รับค่าเป็น string value ("''") or ('""')
-> สามารถใช้ condition expression ได้
-> ngStyle คือการ set object ให้ binding style (set multiple style)
    -> เราใช้ - ไม่ได้ (font-style ต้องเป็น camel case => fontStyle) ใน ngStyle
Note : ชื่อ property ใน Object ถ้าไม่มี "" or '' จะต้องพิมพ์ติดกันเป็น camel case

Event Binding
-> การส่ง data จาก component template สู่ component class
    -> syntax => (event)
    -> ทำผ่าน event handle (function ของ component class)
-> สามารถส่ง parameter event handle ได้ ($event)
    -> special var ของ angular (จะส่ง all information about DOM ของ event ที่เราทำ เช่น click)
        -> สามารถ access all property ของ DOM event
-> สามารถใช้ template statement แทน event handle ได้ (set property ผ่าน event binding ได้เลย)

Template Reference Variables
-> การ binding data ของ component template (refer html element และ all DOM property)
    -> syntax => #ตามด้วยชื่อตัวแปร
note : argument vs parameter
        -> sum(a,b) => retunr a+b; => a,b คือ parameter
        -> var result = sum(4,5); => 4,5 คือ argument

Two Way Binding
-> การเปลี่ยนแปลง data ที่ template ,data(property) ที่ class จะเปลี่ยนแปลงด้วย หรือ 
    เปลี่ยนแปลง data(property) ที่ class ,data ที่ template จะเปลี่ยนแปลงด้วย
-> syntax => [(ngModel)] -> ต้องเรียกใช้ FormsModule
    => [] property binding = data from class to template
    => () event binding = data from template to class

Ng-Directive (ดูตัวอย่างที่ ng-directive.component)
->NgIf (if เงื่อนไข ซ่อน แสดง Html element) => syntax *ngIf
    ->If else สามารถใช้ ng-template(template reference var) เข้ามาช่วย 
        -> เป็น container สำหรับ element อื่นที่มาใช้ร่วมกับ ng-if directive
-NgSwitch (switch statement สำหรับ multiple value) => syntax [ngSwitch] กับ *ngSwitchCase
-NgFor => syntax  *ngFor="let i of list" note: list คือ array ที่เราจะเอามา for-loop
    -> สามารถอ้างอิง Index ของ array ได้ ด้วย index as i (i หรือ ชื่ออะไรก็ได้)
    -> สามารถ check ว่าเป็น first element ได้ด้วย first as f (f หรือ ชื่ออะไรก็ได้)
    -> สามารถ check ว่าเป็น last element ได้ด้วย last as l (l หรือ ชื่ออะไรก็ได้)
    -> สามารถ check ว่า index เป็น odd ได้ด้วย odd as o (o หรือ ชื่ออะไรก็ได้)
    -> สามารถ check ว่า index เป็น even ได้ด้วย even as e (e หรือ ชื่ออะไรก็ได้)

Component Interaction (ดูตัวอย่างที่ component-interaction.component)
-> คือการรับ-ส่ง data ระหว่าง Parent component กับ Child component
-> component ที่เป็น parent component
    -> สามารถมี child component ซึ่งทำงานอิสระต่อกัน
-> วิธีรับ-ส่ง data จะใช้
    -> ส่ง data จาก parent ไปที่ child
        -> declare property ที่จะส่ง แล้วกำหนด property binding ให้กับ selector ของ component ที่ต้องการให้เป็น child 
        เช่น [parentData]="propertyที่จะส่ง"
        -> ใช้ decorator input (@input) ที่ child ให้กับ property ที่เราจะเอาไว้รับค่าที่ส่งมาจาก parent 
        (child component จะรับ data(input) จาก parent component) แล้วนำ property ที่รับค่ามานั้น ไป binding ใน child component template ต่อ

    -> รับ data จาก child (่ส่ง data จาก child ไป parent)
        -> สร้าง event ในการส่ง data จาก child ไป parent (EventEmiiter) ที่ child
        -> ใช้ decorator output (@output) ที่ child ให้กับ event ที่เราสร้าง
        (child component จะส่ง data (output) ไปที่ parent component)
        -> สร้าง event binding (childEvent) ที่ parent component ให้กับ selector ของ component ที่เป็น child + สร้าง property ที่รับค่าจาก event ที่ได้จาก child
note: 
    ->จากตัวอย่าง app.component เป็น parent ส่วน component-interaction.component เป็น child
    ->@input , @output สามารถ define ชื่อให้มันได้

Pipes

