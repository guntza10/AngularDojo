Angular
-Angular มี app module ที่เป็น root module (main module) อย่างน้อย 1 module (module เป็น feature ต่างๆของ angular)
-แต่ละ module เป็น component กับ service
 -> component เป็นส่วนของ view
    -> angular app จะมี component อย่างน้อย 1 ตัว ที่เป็น root component(main component)
    -> ทุกๆ component จะอยู่ใน root component
    -> แต่ละ component จะมี html(view),class(control logic)
    -> มี service ที่จัดการกับ back end
-angular app จะมีได้หลาย module
 -> แต่ละ module จะมีได้หลาย component ,service
 -> module สามารถ import , export ได้


Package.json จะมีพวก library , module ที่ angular app ใช้
 -> จะ install เมื่อเรา run ng new (ตอนสร้าง Project) รวมถึง node_module

src folder
-main.ts เป็น entry point(จุดเริ่มต้น) ของ angular app
-app.module ถูก export ไปใช้ที่ main.ts
-app folder
 -> app.module.ts เป็น root module
 -> app.component.ts เป็น root component

เมื่อรัน ng serve 
-มันจะมาที่ main.ts จะมี bootstrap kick start ไปที่ app.module 
 -> ใน app module ก็จะมี bootstrap kick start ไปที่ app.component
    -> จะมี html,class
        -> class จะมี logic หรือ data สำหรับ view
-index.html เป็น main template (ที่มี app.component) -> เป็นโครง view หลัก
-เวลาจะใช้ component อื่น เอามาใช้ใน app.component(ที่เป็น root component ของ angular)

Component 
-Template(view) -> html
-Class(logic+data+method) -> typescript
-Metadata(information) -> ใช้บอกว่าเป็น particular class หรือ regular class ใน component
    -> เป็น property ข้อมูลที่ อยู่ใน decorator
    -> จะมี decorator(function ที่จัดการข้อมูลเกี่ยวกับ class ของ component) ที่เป็น feature ที่ใช้ใน Typescript (ดูตัวอย่างใน app.component.ts)
    -> metadata templateUrl ที่อ้างอิงไฟล์ html สามารถใช้ property template ที่อ้างอิง tag html ได้โดยตรง (ดูตัวอย่างใน test.component.ts)
        -> ใช้ `` escape key ครอบ ถ้าจะทำเป็น multiple line
    -> metadata styleUrls สามารถใช้ styles แทนได้เหมือนข้างบน
-ทุกครั้งที่สร้าง component จะมีการการ Import component class ให้ auto ใน app.module (ทุกๆ component ต้อง declare ที่ app.module ไม่งั้นจะไม่เห็นใช้งาน component นั้นไม่ได้)
-ทุก component เอามาใช้ภายใต้ app.component(root component)
note : เวลาสร้าง component จะมี spec ไฟล์สำหรับ test(ไม่จำเป็นสามารถลบได้)
-เราสามารถ define selector ของ component ได้ 3 วิธี (ดูตัวอย่างที่ test.component.html)
    -> กำหนดชื่อ tag 
    -> กำหนดให้เป็น class css
    -> กำหนดให้เป็น attribute 

Interpolation => syntax{{}} (ดูตัวอย่างที่ binding.component.ts)
-คือการ binding data จาก component class สู่ component template(view)
-ไม่สามารถ define ตัวแปรได้ เช่น a = 2+2
-ไม่สามารถใช้ global javascript variable ได้ เช่น window ,screen 
note : interpolation มีข้อจำกัดที่สามารถใช้งานได้แค่กับ string value เท่านั้น ใช้กับ attribute ที่เป็น boolean ไม่ได้

Property Binding -> คือการ binding data ให้ attribute ที่เป็น boolean only? (ดูตัวอย่างที่ binding.component.ts)
-attribute ที่เป็น boolean 
    -> ไม่สามารถไปเปลี่ยนแปลงค่ามันได้ด้วย string value ("true" or "false")
        ->เช่น disabled (เปลี่ยนแปลงค่าที่เป็น string value ไม่มีผล disabled = "false" เพราะมันต้องการ true or false ที่เป็น boolean)
-ใช้กับ attribute ได้หมด แต่นิยมใช้กับ attribute ที่เป็น boolean เนื่องจากข้อจำกัดที่กล่าวไปข้างต้น
note : syntax [] or bind-ชื่อของ attribute

Class Binding
-> binding class css ว่าจะใช้หรือไม่ใช้ (ดูตัวอย่างที่ binding.component.ts)
-> ngClass คือการ set object ให้ binding class โดยที่เราไม่ต้องไป set หลายครั้ง set เป็น object รอบเดียวจบ (set multiple class)
-> รับค่าเป็น boolean (property หรือ function ก็ได้ที่ return boolean)

Style Binding
-> binding style css property
-> รับค่าเป็น string value ("''") or ('""')
-> สามารถใช้ condition expression ได้
-> ngStyle คือการ set object ให้ binding style (set multiple style)
    -> เราใช้ - ไม่ได้ (font-style ต้องเป็น camel case => fontStyle) ใน ngStyle
Note : ชื่อ property ใน Object ถ้าไม่มี "" or '' จะต้องพิมพ์ติดกันเป็น camel case

Event Binding
-> การส่ง data จาก component template สู่ component class
    -> syntax => (event)
    -> ทำผ่าน event handle (function ของ component class)
-> สามารถส่ง parameter event handle ได้ ($event)
    -> special var ของ angular (จะส่ง all information about DOM ของ event ที่เราทำ เช่น click)
        -> สามารถ access all property ของ DOM event
-> สามารถใช้ template statement แทน event handle ได้ (set property ผ่าน event binding ได้เลย)

Template Reference Variables
-> การ binding data ของ component template (อ้างถึง html element และ all DOM property)
    -> syntax => #ตามด้วยชื่อตัวแปร
-> การใช้ template ref สามารถทำให้ parent access เข้าถึง property หรือ method ของ child ได้ (ดูตัวอย่างที่ app.component.html กับ ng-on-change-demo.component.ts)
    -> เหมาะใช้กับพวก Nested component หรือ form (เป็นการ access ผ่าน view ถ้าอยาก access ผ่าน class ให้ใช้ ViewChild decorator)
note : argument vs parameter
        -> sum(a,b) => retunr a+b; => a,b คือ parameter
        -> var result = sum(4,5); => 4,5 คือ argument

Two Way Binding (ใช้จัดการกับพวก input ที่ต้องการให้มัน Interact ทั้ง view และ class)
-> การเปลี่ยนแปลง data ที่ template ,data(property) ที่ class จะเปลี่ยนแปลงด้วย หรือ 
    เปลี่ยนแปลง data(property) ที่ class ,data ที่ template จะเปลี่ยนแปลงด้วย
-> syntax => [(ngModel)] -> ต้อง import FormsModule มาใช้ใน app.module (import { FormsModule } from '@angular/forms')
    => [] property binding = data from class to template
    => () event binding = data from template to class
    => two way binding [()] -> จะรับค่าจาก template มาที่ class ผ่าน event binding แล้วอัพเดทค่าจาก class สู่ template ด้วย property binding
-> split two way binding -> ทำให้สามารถ handle two way binding แบบ advance ได้มากขึ้น
Note : สามารถใช้แบบ advance จัดการกับการส่ง data จาก Parent มา child ได้ (ดูตัวอย่างที่ app.component.ts กับ component-interactive2.ts)

Getters-Setters (ดูตัวอย่างที่ binding.component.ts) -> ใช้ตัวนี้ หรือ split two way binding (อันนี้มันใช้จัดการได้หมด two way binding จัดการแค่ Input)
- ใช้ดักการเปลี่ยนแปลงของ property input เพื่อจัดการอะไรบางอย่าง (จัดการ get - set กับ private property)
- getter(get) เป็น function ที่ return private property
- setter(set) เป็น function ที่รับค่า แล้วมา assign ให้ private property
- แล้วเอา getter setter ไป binding
Note : สามารถใช้แบบ advance จัดการกับการส่ง data จาก Parent มา child ได้ (ดูตัวอย่างที่ app.component.ts กับ component-interactive2.ts)

ngOnChanges (ดูตัวอย่างที่ ng-on-change-demo.component.ts)
- เอาไว้ดัก property ที่ค่าเปลี่ยน(เหมาะกับดัก input หลายๆตัว ที่สามารถ Keep track เรื่อง previouseValue,currentValue)
- จะรับ parameter เป็น type SimpleChanges (changes: SimpleChanges) เป็น object ที่มี property ดังนี้
    -> previousValue เป็นค่าก่อนหน้าที่จะเปลี่ยน
    -> currentValue เป็นค่าปัจจุบัน
    -> firstChange เป็นสถานะ true,false ว่าเป็นการเปลี่ยนครั้งแรกใช่มั้ย?
- สามารถ get ค่า property ของ object SimpleChanges ได้ด้วย changes['ชื่อ property ของเราที่มีการเปลี่ยนแปลง']
Note : getters-setters เหมาะกับจัดการ input แค่ตัวเดียว แต่ถ้ามี property หลายตัวที่เราอยากดักการเปลี่ยนแปลงให้ใช้ ngOnChanges (มันจะประหยัดเรื่องบรรทัดไม่ต้องเขียนเยอะ)

Ng-Directive (ดูตัวอย่างที่ ng-directive.component)
->NgIf (if เงื่อนไข ซ่อน แสดง Html element) => syntax *ngIf
    ->If else สามารถใช้ ng-template(template reference var) เข้ามาช่วย 
        -> เป็น container สำหรับ element อื่นที่มาใช้ร่วมกับ ng-if directive
-NgSwitch (switch statement สำหรับ multiple value) => syntax [ngSwitch] กับ *ngSwitchCase
-NgFor => syntax  *ngFor="let i of list" note: list คือ array ที่เราจะเอามา for-loop
    -> สามารถอ้างอิง Index ของ array ได้ ด้วย index as i (i หรือ ชื่ออะไรก็ได้)
    -> สามารถ check ว่าเป็น first element ได้ด้วย first as f (f หรือ ชื่ออะไรก็ได้)
    -> สามารถ check ว่าเป็น last element ได้ด้วย last as l (l หรือ ชื่ออะไรก็ได้)
    -> สามารถ check ว่า index เป็น odd ได้ด้วย odd as o (o หรือ ชื่ออะไรก็ได้)
    -> สามารถ check ว่า index เป็น even ได้ด้วย even as e (e หรือ ชื่ออะไรก็ได้)

Component Interaction (ดูตัวอย่างที่ component-interaction.component)
-> คือการรับ-ส่ง data ระหว่าง Parent component กับ Child component
-> component ที่เป็น parent component
    -> สามารถมี child component ซึ่งทำงานอิสระต่อกัน
-> วิธีรับ-ส่ง data จะใช้
    -> ส่ง data จาก parent ไปที่ child
        -> declare property ที่จะส่ง แล้วกำหนด property binding ให้กับ selector ของ component ที่ต้องการให้เป็น child 
        เช่น [parentData]="propertyที่จะส่ง" ใน tag ของ child component (ตั้งชื่อ attribute อะไรก็ได้ไม่จำเป็นต้อง parentData)
        -> ใช้ decorator input (@input) ที่ child ให้กับ property ที่เราจะเอาไว้รับค่าที่ส่งมาจาก parent 
        (child component จะรับ data(input) จาก parent component) แล้วนำ property ที่รับค่ามานั้น ไป binding ใน child component template ต่อ

    -> รับ data จาก child (่ส่ง data จาก child ไป parent)
        -> สร้าง event ในการส่ง data จาก child ไป parent (EventEmiiter) ที่ child (define type ได้ new EventEmiiter<string>() เป็นต้น)
        -> ใช้ decorator output (@output) ที่ child ให้กับ event ที่เราสร้าง
        (child component จะส่ง data (output) ไปที่ parent component)
        -> สร้าง event binding (childEvent) ที่ parent component ให้กับ selector ของ component ที่เป็น child + สร้าง property ที่รับค่าจาก event ที่ได้จาก child
            -> ค่าที่รับจาก child จะเป็น $event(event value)
note: 
    ->จากตัวอย่าง app.component เป็น parent ส่วน component-interaction.component เป็น child
    ->@input , @output สามารถ define ชื่อให้มันได้
    ->decorator ของ component มีได้แค่ decorator เดียว?
Note: nested component คือ component ที่มันซ้อนกันอยู่

ViewChild Decorator (ดูตัวอย่างที่ app.component.ts)
- ปกติเรารับ - ส่ง data ระหว่าง parent กับ child แบบ One by one โดยใช้ @input , @output 
    -> แต่ถ้าเราอยากเข้าถึง property,method(data) ทั้งหมดที่ Public ใน child เราจะใช้ @ViewChild (เข้าถึงเพื่อแก้ไข-เปลี่ยนแปลง data ของ child จาก parent)
        => (ex. ใช้กับพวก modal เป็นต้น )
- ใช้ template ref ในการ อ้างถึงตัว child component (จะใช้หรือไม่ใช้ก็ได้)->(ดูตัวอย่างที่ app.component.ts,app.component.html)
    Ex.
        ->  @ViewChild('testViewChild', { static: false }) testViewChild: NgDirectiveComponent; -> ใช้ template ref
        ->  @ViewChild(NgDirectiveComponent, { static: false }) testViewChild: NgDirectiveComponent; ไม่ใช้ template ref ก็ใช้ child ref แทน
Note : ใน Angular เวอร์ชั่นใหม่เราต้องใส่ option static (true,false)
    -> false => เราจะใช้ view child ใน ngOnInit ไม่ได้ (มันใช้ตอนที่ไม่ต้อง initialize เสร็จ แต่ไปใช้ใน ngOnInit ที่ต้อง initilize เสร็จก่อน ทำให้ใช้ใน ngOnInit ไม่ได้)
    -> true => เราจะใช้ view child ใน ngOnInit ได้ (ใช้ได้เมื่อมัน initialize เสร็จ อาจช้าเพราะต้องรอให้มันโหลดให้เสร็จหมดก่อน)

Component Interaction Using Service (ดูตัวอย่างที่ Interaction.service.ts,app.component.ts,interation-service.component.ts)
1. parent -> service -> child
- เป็นการส่ง data จาก parent ไปที่ service (share data ไว้ที่ service) แล้วให้ child ที่ต้องการ data ไป subscribe data มาใช้
- step 
    -> สร้าง subject เอาไว้เก็บ data ที่ parent ต้องการจะแชร์ ที่ service
    -> เอา subject ที่สร้างแปลงให้มันเป็น Observable เก็บไว้ใน Local property (property ที่เก็บ Observable ของ subject)
    -> parent เรียกใช้ method ของ service ที่ทำหน้าที่รับ data ไปเก็บไว้ที่ subject
    -> child ตัวไหนที่อยากได้ data ที่แชร์เก็บไว้ที่ survice ก็มา subscribe ไปใช้ได้ผ่านตัว property ของ service ที่เราเก็บ Observable ของ subject
Note : component ที่ subscribe ไปใช้ ไม่จำเป็นต้องเป็น parent-child กันก็ได้ เพราะ data มันถูกแชร์เก็บไว้ที่ service แล้ว component ไหนจะมา subscribe ไปใช้ก็ได้
2. ทำ service ขึ้นมาเพื่อแชร์ data ให้กับ component (ดูตัวอย่างที่ share-service1.component.ts,share-service2.component.ts)
Note : เราสามารถใช้ service ที่เรา dependency injection มาใช้ได้เลยใน html แค่ declare ให้มันเป็น Public

Parent Injection (****ไม่แนะนำให้ทำ) (ดูตัวอย่างที่ parent-injection.component.ts)
- คือการที่ child เข้าถึง data ของ parent (วิธีนี้ไม่แนะนำเพราะมันจะทำให้เกิดสภาวะวนลูป ถ้า data ที่เราเข้าถึงใน parent มันมีผลกับ child เช่นถ้าเราเปลี่ยนค่าให้มัน)
- dependency inject parent เข้ามาใน child

Pipes (ดูตัวอย่างที่ pipes.component.html)
-> ใช้แปลง data ก่อนจะเอาไปแสดงที่ view จะไม่เปลี่ยแปลงค่าของ property ของ class

Dependency Injection
-> dependency คือการที่ constructor ของ class รับ parameter เข้ามา
Note : ถ้า inject ไว้เป็น private จะใช้ได้แค่ใน class แต่ถ้า inject เป็น public สามารถเอาไปใช้ใน html ได้เลยตรงๆ
Ex.
class Engine {
    constructor(newParemeter) {

    }
}

class Tires {
    constructor(newParemeter) {

    }
}

class Car {
    engine; -> มี dependency 2 ตัว คือ engine,tires
    tires;
    constructor() {
        this.engine = new Engine();
        this.tires = new Tires();
    }
}
Note: code drawbacks ไม่ flexible เพราะถ้า dependency ที่เราไป instance มามีการรับ parameter จะทำให้ Car เราพังเนื่องจาก Engine 
ที่เรา instance มามันมีการรับ parameter เพราะฉะนั้นตอน instance มาใช้ใน Car ต้องรับ argument เข้ามาด้วย 
การเปลี่ยน dependency ของ class ที่ instance มาใช้ ทำให้เราต้องเปลี่ยนตามด้วยใน class ที่นำมาใช้

-> dependency injection คือการที่ constructor ของ class รับ dependency(object ที่ถูกสร้างจาก classอื่น) จากภายนอก inject เข้ามาใช้ใน parameter
แทนการ instance มาใช้โดยตรง (inject dependency เข้ามาใน parameter ของ constructor) จะเห็นว่า code flexible มากตามตัวอย่างข้างล่าง
Ex.
class Car {
    engine; 
    tires;
    
    constructor(engine,tires) { -> รับ dependency จากภายนอกแทน
        this.engine = engine;
        this.tires = tires;
    }
}

var myEngine = new Engine();               |     var myEngine = new Engine(parameter);     |      var myEngine = new Engine(parameter);
var myTires = new Tires();                 |     var myTires = new Tires();                |      var myTires = new Tires(parameter);
var myCar = new Car(myEngine,myTires);     |     var myCar = new Car(myEngine,myTires);    |      var myCar = new Car(myEngine,myTires);

Ex. ถ้าเกิดเรามี dependency เยอะ เราต้องสร้าง dependency ทั้งหมดที่เราจะใช้ก่อนจะเอาไปสร้าง Car 
ซึ่งเป็นเรื่องยากที่จะจัดการหาก dependency มีเยอะมากๆ
var myEngine = new Engine();
var myTires = new Tires();
var depA = new dependency();
var depB = new dependency();
var depC = new dependency();
var myCar = new Car(myEngine,myTires,depA,depB,depC);
Note: ใน angular เราใช้ dependency injection ในการทำ service ห้ามทำ draw back เพราะมันไม่ flexible และไม่ standard ที่เค้าทำกัน
    -> สร้าง service 
    -> import module HttpClientModule ไว้ใช้สำหรับจัดการพวกการเชื่อมต่อกับ server หรือ api (ไว้ที่ imports ของ app.module)
        -> import { HttpClientModule} from '@angular/common/http';
    -> register service ไปที่ providers ของ app.module (ใน angular เวอร์ชั้นล่าสุดไม่ต้อง register แล้ว )
    -> dependency injection HttpClient มาใช้ใน service
- dependency injection ใน angular แค่ inject dependency เข้ามาก็สามารถใช้ dependency ของ class อื่นได้เลย ไม่ต้องสร้าง Instance 
เพียงแค่ declare ใน parameter ของ constructor ก็สามารถเอาไปใช้ได้เลย
  
Service (ดูตัวอย่างที่ employee.service.ts,for-service1.component,for-service2.component)
-> โดยหลักการแล้ว เราไม่ควรจัดการกับ data ใน class (class ควรจัดการแค่ logic ที่ควบคุม view) หรือถ้ามีการใช้ data ซ้ำๆหลายที่ 
    -> เราควรใช้ service จัดการ
-> เป็น class ที่จัดการเรื่องที่มัน specific
    -> ใช้ share data ให้หลายๆ component
    -> ใช้จัดการ Logic จัดการ data
    -> ใช้จัดการการเชื่อมต่อ database รับส่งข้อมูล 
note: 
    -วิธีตั้งชื่อ service => xxxx.service.ts
-> step ในการทำ service
    -> สร้าง service
    -> import module HttpClientModule ไว้ใช้สำหรับจัดการพวกการเชื่อมต่อกับ server หรือ api (ไว้ที่ imports ของ app.module) *(ถ้ามีการจัดการกับ server,api)
    -> register service (ด้วยการ injection)
        => ควร register ที่ app module(app module คือชั้นบนสุด) -> เพื่อที่จะสามารถนำไปใช้ได้ทุกที่ (register ที่ providers ที่เป็น angular injector)
        Note: ไม่ต้องทำขั้นตอนนี้แล้วในเวอร์ชั่นล่าสุด
    -> dependency injection service ใน class component ที่เราต้องการใช้
    note : ถ้า register service ที่ไหนแล้ว สามารถใช้ service กับตัวมันและ child มันได้
note : 
    ->Injectable decorator ใน service เป็นตัวบอกว่า class นี้เป็น service
        -> ทำให้สามารถใช้ dependency injection ได้ 
        -> ถ้าต้องการ inject service อื่นเข้ามาใช้ใน service เราจะต้องใช้ Injectable decorator 
    -> component class ไม่ได้มี Injectable decorator แต่ก็ยังสามารถใช้ service ได้ 
    เพราะมี component decorator ที่ทำให้สามารถใช้ dependency injection ได้ 
    แต่ service ไม่มี component decorator แล้วถ้าเอา Injectable decorator ออกจาก service มันจะกลายเป็น class ธรรมดา

Http and Observables
-> เราดึง data จาก server ผ่าน service ด้วย Http request
    -> ส่ง Http request ไปที่ web api หรือ web service เพื่อไปดึง data จาก database แล้วส่ง Http response กลับมา 
-> Observable คือ Http response ที่ได้กลับมา
-> step การทำงานของ Http
    -> service ส่ง Http request ไปที่ web api or web server เพื่อไปดึง data จาก database
    -> database ส่ง Observable (Http response) กลับมา แปลง Observable ที่ได้ให้เป็นโมเดล data ที่เราต้องการนำไปแสดง (cast observable ให้เป็นโมเดล data)
    -> subscribe ตัว Observable ไปใช้ต่อที่ component ที่เราต้องการใช้แสดงข้อมูล (subscribe เป็นตัวแปลง Observable ที่ถูก cast ให้เป็นก้อน data)
        -> แปลง Http response ให้กลายเป็นก้อน data
    -> สร้าง array data ที่ Local แล้วนำ subscribe data ที่ได้มาเก็บที่ตัวแปร local
Note : 
-> RxJs(Reactive Extensions for Javascript)
    -> เป็น library ที่จัดการเกี่ยวกับ Observable ใน angular (เป็น external library ที่ทำงานด้วย observable)

Fetch Data Using HTTP
- import HttpClientModule ใน imports ของ app.module (เพื่อ register Http service มาใช้ใน angular)
- dependency injection HttpClient ที่ service ที่เราจะใช้
- สร้าง model ของ data
- สร้าง url ที่จะใช้ยิง request 
- สร้าง Method ที่ส่ง Http request และรับ Http response กลับมา return observable
- dependency injection service ไปใช้ที่ component ที่ต้องการ
- subscribe ตัว Observable ที่ได้จาก Method ของ service -> จะได้ data มา
- เอา data ที่ได้มาเก็บที่ตัวแปร Local (property ของ component) เพื่อเอาไปใช้ binding ต่อ

HTTP Error Handling (ดูตัวอย่างที่ employee.service.ts)
- ใช้ catchError ผ่าน pipe ในการ handle exception error -> ใน argument จะรับ method ที่จัดการ error
- จะโชว์ message error ให้กับ component ที่ subscripe observable ไปใช้
- step
    ->  import { Observable, throwError } from "rxjs";
        import { catchError } from "rxjs/operators";
    -> ใช้ pipe(catchError(this.handlerError)) ให้กับ observable ใน service
    -> สร้าง method ที่ใช้ throw error
    -> ใน argument ตัวที่ 2 ของ subscribe จะเป็น error function ที่จัดการ error
        -> set ให้กับ component ที่ subscribe ไปใช้

Routing and Navigation (ดูตัวอย่างที่ Project routing-demo)
- ที่ base tag ใน index.html จะมี href ="/" ที่ angular application จะรู้ว่าต้องสร้าง url เพื่อการ navigate ไปที่ไหน ขึ้นอยู่กับการ configure ใน app-routing.module
- step 
    1. สร้าง project ด้วย routing option (ตอนสร้าง project มันจะถามเราว่าจะสร้าง routing option มาด้วยหรือเปล่า) -> จะถูกสร้างมาให้อยู่แล้วตอนสร้างโปรเจ็ค
        - ที่ app-routing.module จะเอาไว้จัดการเกี่ยวกับ route (เป็น route option)
            -> ใน app.module จะมี AppRoutingModule ที่อยู่ใน imports ที่ใช้ในการ route 
    2. สร้าง component ที่จะใช้ navigate 
    Note : การสร้าง component จะมี option
        -it => inline template -> จะไม่มี html มาให้
        -is => inline style -> จะไม่มี css
        --skipTests=true -> ถ้าเป็น true จะไม่สร้าง ไฟล์ .spec
    3. configure route
        -> ใน app-routing.module เราจะกำหนด route ทั้งหมดที่ const routes ซึ่งแต่ละ route จะเป็น Object    
            -> route object จะมี property ดังนี้
                -path => กำหนด url ของ component ที่เราจะ navigate ไป
                -component => เป็นตัวบอกว่าเราจะ navigate ไปที่ component ไหน
        -> routes ที่เราสร้างจะถูกส่งไปที่ argument ของ forRoot ของ routerModule 
    Note : จะเห็นว่าเรามีการ import component 2 ที่ คือที่ app.module กับ app-routing.module (ดูตัวอย่างที่ app-routing.module และ app.module)
        -> เราสามารถ import ไปใช้ที่ app-routing.module ที่เดียว แล้ว export จาก app-routing.module ไปใช้ที่ app.module ได้ (good practice)
    Note : 
        -> router-outlet เป็น tag ที่บอกให้ router เอา view จาก component ที่ถูก map ตาม path url มาแสดงออกมาที่ outlet นี้
        เอาไว้ตรงไหนก็ได้ที่อยากให้ component นั้นแสดง  (ใช้ระบุว่า component นี้สามารถ navigate เข้าไปที่ component อื่นได้)
        -> navigation ใช้ routerLink = "/pathUrl" -> เป็นการ navigate ไปที่ path โดยตรง (direct navigate)
        -> routerLinkActive เป็นการกำหนด css ให้กับ routerLink เมื่อมีการ navigate

Wildcard Route and Redirecting Routes
-> Wildcard Route
    - path : "**" => คือ route path ที่ไม่ map กับ route path ไหนเลยที่เรา config มันก็จะมาเข้า wildcard route ตัวนี้
        -> เอาไว้ใช้ทำ 404 - Not Found (เพราะ path ที่เราเข้ามาไม่ map กับ path ไหนเลย)
-> Redirect Route
    - redirectTo => ให้มัน redirect ไปที่ path ที่เรากำหนด
        - redirectTo = '' -> คือ redirect ไปที่ default คือ app.component
    - pathMatch => เป็น property ที่กำหนดวิธีการ map path url ว่าจะ map url segment แบบไหน
        -> full -> จะ redirect ไปได้ต้องเข้ามาด้วย path url แบบเต็มๆ
        -> prefix -> ไม่ว่าจะเข้ามาด้วย path url แบบไหน ถ้าใน path url นั้นมี path url prefix อยู่ก็จะ redirect ไปได้หมด
        EX.
            { path: '/route1/route2/route3', redirectTo: 'login', pathMatch: 'full' },
            { path: 'login', component: LoginComponent }
                full -> จะต้องเข้ามาด้วย path url /route1/route2/route3 นี้เท่านั้นถึงจะ redirect
            { path: '/route1/route2', redirectTo: 'login', pathMatch: 'prefix' },
            { path: 'login', component: LoginComponent }
                prefix -> ไม่ว่าจะเข้ามาด้วย path url อะไรก็ตามที่มี /route1/route2 (เป็น prefix path) ก็จะ redirect ไปได้หมด
                    เช่น /route1/route2/route3 หรือ /route1/route2/route4 
Note : เวลามันไล่ทำ routes มันทำจากบนลงล่าง เลยต้องกำหนด wildcard route ไว้ล่างสุด เพื่อให้มัน หา route path ทั้งหมดไม่เจอก่อน
Note : path default เราไม่นิยมให้มัน direct route ไปที่ component โดยตรง (ดูตัวอย่างที่ app-routing.module)
Note : path ที่กำหนดไม่ต้องใส่ / แต่ redirectTo จะใส่ / หรือไม่ใส่ก็ได้
Note :  path '' (empty path) กำหนด pathMatch เป็น prefix ไม่ได้ 
        จะทำให้เข้า path ไหนก็จะเข้ามาที่ path '' เสมอ เนื่องจาก path '' เป็น prefix path ของทุก path

Route Parameters (ดูตัวอย่างที่ department-list.component.ts) ** core
- กำหนด path สำหรับ route parameter
    -> path : 'path: 'departments/:id' -> ที่อยู่ด้านหลัง : คือชื่อ route parameter ที่เราต้องการส่ง
- import {Router} from '@angular/router';' (จัดการที่ component ที่เราต้องการจะส่ง parameter) ** core package ที่ใช้สำหรับการ navigate
    -> inject Router มาใช้ (ดูตัวอย่างที่ department-list.ts)
    ->  this.router.navigate(['/ชื่อpath', ชื่อ route parameter ที่เรา config ไว้ที่ app-routing.module]) -> ? **Edit
    ->  this.router.navigate(['/ชื่อpath', route parameter ของเรา]) -> ? **Edit
    ตั้งให้ตรงกับที่เรา config ไว้เพื่อที่จะ navigate ไปให้ถูก path  or ตามด้วย route param? **Edit
- import { ActivatedRoute } from '@angular/router'; (จัดการที่ component ที่เราต้องการจะรับ parameter) ** core package ที่ใช้สำหรับการรับค่าจากการ navigate
    -> inject ActivatedRoute มาใช้ (ดูตัวอย่างที่ department-detail.component.ts)
    -> this.router.snapshot.paramMap.get('id') -> ใช้ในการ get ค่า route parameter
    Note : snapshot คือการ get state ของ router ในตอนนั้น(เมื่อ initialize)เพื่อที่จะใช้ paramMap.get('param') ต่อได้
Note: navigate() -> path url ไม่ต้องใส่ /
Note : ถ้าจะ get current url -> this.router.url

ParamMap Observable (ดูตัวอย่างที่ department-detail.component.ts)
- ถ้าเรา navigate กลับมาที่ component เดิม snapshot ไม่เวิร์ค (มันจะทำแค่ตอนที่ initialize)
 -> มัน Initialize แค่ครั้งแรกที่ถูกสร้าง ถ้าเรา navigate กลับมาที่ component เดิมมันไม่ได้ initialize ใหม่ แต่แค่ reused component เดิม
- เราแก้ไขโดยใช้ paramMap (ถ้าเรา navigate แล้วส่งค่ากลับมาที่ component เดิม ใช้ paramMap)

Optional Route Parameters
- คือการส่งค่า property ไปที่ component อื่น
- this.router.navigate(['/pathของcomponent,{ชื่อ property: ค่าที่เราต้องการส่งกลับ}])
    -> this.router.navigate(['/departments', {id:selectedId}]) 
    -> จะต่างกับ route param ตรงที่ใส่ {} ครอบ property ที่เราต้องการส่งค่าไปที่อีก component แต่ route param ที่ไม่มี {} 
        ตัว navigate มันจะไป match กับ route param ที่เรา config ไว้ที่ app-routing.module
    -> สามารถส่งค่า property ได้หลายค่า
์Note : ==, === แตกต่างกันตรงที่ อันแรกจะ convert ให้เป็น type เดียวกันก่อน compare แต่อันที่ 2 คือ compare เลย ทำให้แบบที่ 2 มัน strong compare กว่าแบบแรก 
     เพราะมันต้องเป็น type เดียวกันเท่านั้นถึงจะ compare กันได้ ถ้าคนละ type มันจะ compare ไม่ได้แล้ว return false ทันที

Relative Navigation (ดูตัวอย่างที่ department-list.component.ts กับ department-detail.component.ts)
- absolute path route ก่อนหน้านี้ที่ผ่านมามันไม่ flexible เพราะถ้าเราเปลี่ยน path route ที่ config ไว้ที่ app-routing.module 
  เราต้องไปไล่เปลี่ยน path route ให้กับทุกที่ที่เราใช้ absolute path
- แก้ปัญหาการใช้ absolute path ที่ไม่ flexible
    -> this.router.navigate([a],{b})
         -> a => array ของ parameter ที่เราต้องการส่ง (route parameter)
         -> b =>  object ของ property relativeTo -> จะส่ง route parameter ไปที่ path url ของ current route(ActivatedRoute) 
         (optional route parameter)
Note : absolute path คือ path เต็มๆ เช่น '/departments' ถ้าเราเปลี่ยนไปใช้ 'department-list' เราต้องไปนั่งไล่เปลี่ยนทุกที่ที่เราใช้ absolute path 
ตัวนี้ไม่งั้นมันจะerrorเพราะมันไม่รู้จัก path เดิมนี้ซึ่งมันโดนเปลี่ยนไปแล้ว

Child Routes (ดูตัวอย่างที่ department-detail.component.ts) -> เป็นการเอา component อื่นมาแปะบน component เราโดยไม่เปลี่ยนหน้า
- set child route ผ่าน property children ให้กับ component ที่เราต้องการให้มันมี route ย่อย
ต้องการการเข้า path url ซ้อนเข้าไปเรื่อยๆ  (config ใน app-routing.module.ts)
- อย่าลืมใช้ router-outlet เพื่อสามารถใช้ navigate เข้าไปที่ component อื่นที่เป็น child route 
    -> เพื่อนำ view จาก component ของ child route ออกมาแสดงที่ parent component 

New Feature in Angular 6
- เลิกใช้ tag template มาใช้ tag ng-template แทน
- service ที่สร้างไม่ต้องไป inject ไว้ที่ providers ของ app.module แล้ว
    -> set property providedIn : 'root' ใน Injectable decorator จบ (การ set providedIn จะทำให้ทั้ง app สามารถเรียกใช้ service ได้เลยแบบ auto)
        -> เป็นการ instance service เพื่อให้ทั้ง app สามารถเรียกใช้ service นี้ได้ 
- มี angular material ให้ใช้
- ใช้ ivy render engine ในการ render ที่มีความเร็ว และ ลดขนาด size ของ app

์Angular LifeCycle hooks
- constructor() => จะถูกเรียกใช้เป็นตัวแรกเมื่อ component ถูกสร้างขึ้ันมา (เป็นการสร้างค่าเริ่มต้นให้ class)
- เราสามารถแบ่ง lifecycle ได้เป็น 2 กลุ่ม
   -> group 1 Component (parent) 
        -ngOnChanges() -> จะถูกเรียกเมื่อ input , output ที่ binding มีการเปลี่ยนแปลง
        -ngOnInit() -> จะถูกเรียกเมื่อ component ถูกสร้างเสร็จ(initialize component เสร็จ) 
        -ngDoCheck() -> จะถูกเรียกทุกครั้งเมื่อเรา focus ที่ element นั้นๆ แล้ว check ว่ามีการเปลี่ยนแปลงมั้ย (เอาไว้ดักการเปลี่ยนแปลงในรูปแบบที่ต้องการ)
        -ngOnDestroy() -> จะถูกเรียกใช้ก่อนที่ component จะถูกทำลาย (ใช้ตอนที่ unsubscribe ของ observable,event เพื่อไม่ให้ memory leak)
        Note : memory leak ก็คือเกิดการใช้ ram เรื่อยๆ แบบสิ้นเปลืองไม่เกิดไม่ประโยชน์ทำให้ performance ช้า
    -> group 2 child component
        -ngAfterContentInit() -> จะถูกเรียกในการสร้าง view/content ครั้งแรก
        -ngAfterContentChecked() -> จะถูกเรียกเพื่อ check การเปลี่ยนแปลงต่างๆของ child
        -ngAfterViewInit() -> จะถูกเรียกเมื่อ child ถูกสร้างเสร็จ (initialize child component เสร็จ)
        -ngAfterViewChecked() -> จะถูกเรียกเมื่อ property ที่ binding มีการเปลี่ยนแปลง (ใน child)
์Note : เรียงตามลำดับการถูกเรียก

Trick Typescript
- string interpolation expression => ใช้ `` ครอบตัว string ที่อยากเอา property มา binding โดยไม่ใช้ +
Ex.
    let name = 'gun';
    let result = 'welcome ' + name; -> let result = `welcome ${name}` 
