Angular Form 
- เราใช้ angular form เพื่อการ register,login,submit request เป็นต้น
- จะ handle 
    -> Data Biding
    -> Change tracking 
    -> Validation
    -> Error Message
    -> Form submit
-> มี form 2 แบบ
    -> Template Driven Forms (จะจัดการที่ html)
    -> Reactive Forms (จะจัดการที่ class)

*** กลับมาดู part 5 ใหม่ ngModelGroup

Note : 
    -> ทุก input ที่ต้องการ submit data ควรใส่ไว้ใน tag form
    -> ต้องมี button เป็น type submit เพื่อ submit data ทั้งหมดที่อยู่ใน form นี้
    -> import { FormsModule } from '@angular/forms' -> inject ใส่ Imports


1.Template Driven Forms (TDF) 
- ใช้ Two Way Binding (ngModel)
- สามารถ keep track statement กับ validation
- เหมาะกับการจัดการข้อมูลที่ไม่ได้ซับซ้อน
-> ใช้ ng-directive(ngForm) ให้กับ tag form , angular จะจัดการทำให้ form สามารถ Handle Data Biding,Change tracking,Validation
    Error Message,Form submit ได้
    -> โดยการใช้ template ref var กับ form แล้วใส่ ngForm เข้าไป
    -> แล้วใช้ attribute name กับ ngModel ในการ binding
        -> input type : text -> ได้ค่ามาเป็น string
        -> input type : select -> ได้ค่ามาเป็น string
        -> input type : radio-button -> ได้ค่ามาเป็น string
        -> input type : check-box -> ได้ค่ามาเป็น boolean
    -> ทำให้ check validate ngModel ทั้งหมดที่อยู่ใน ngForm ได้
-> จัดการที่ html
Note : 
    -> ngForm คือ form ของ angular ที่จะทำให้เรา Handle data ใน form ได้

Tracking state and validity (ดูตัวอย่างที่ app.component.ts)
class (state ของ ngForm) -> บอกเป็น state
 - ng-touched,ng-untouched
    -> เมื่อมีการ click หรือ tap ที่ form control แล้วแตะออกจาก form control หรืออะไรก็แล้วแต่ที่ไปกดที่ form control (ng-untouch -> ng-touch)
 - ng-dirty, ng-pristine
    -> เมื่อ form control มีการเปลี่ยนค่า (ng-pristine -> ng-dirty)
 - ng-valid,ng-invalid (**ต้องมี attribute required ด้วยเพื่อดัก valid ,invalid) 
    -> เมื่อ form-control ไม่มีการกรอก (ng-valid -> ng-invalid)
    -> invalid หมายถึงไม่มีการกรอก input หรือ input ที่กรอกเข้ามาไม่ถูกตาม pattern ที่เรา set ให้ input
    Note : สามารถ set valid,invalid ให้กับ pattern input ได้ โดยใช้ attribute pattern แล้วใช้ regular expression
Note : check จาก ngModel ที่อยู่ใน ngForm
property(สำหรับ ngModel) -> return เป็น boolean
- touched,untouched
- dirty,pristine
- valid,invalid 
- errors
Note : 
 ** -> อย่าลืมใส่ required 
    -> ถ้าจะโชว์ valid , invalid ใน view แบบเร็ว ง่ายก็ใช้ bootstrap (แต่ต้องเป็น class form-control) -> .is-invalid,.is-valid

step Template Driven Form
- สร้าง form Html 
- binding ngForm ให้กับ template ref ของ tag form
- binding form-control ใช้ template ref แล้ว ref ถึง ngModel + biding ngModel(กับ property หรือ object)
    -> ngModel เป็นการ bindig data ระหว่าง class กับ html
- ใส่ required ให้กับ tag input ที่เราจะ validate
- ใช้ Class Binding && Style Binding มาช่วยแต่ง css ให้มัน (จัดการการโชว์ error)
    -> เช็คกับ template ref ที่เราอ้างถึง ngModel เพื่อใช้  property 
        - touched,untouch
        - dirty,pristine
        - valid,invalid
    -> ใช้ <small> ในการแสดง error แล้วใช้ class ,style binding แต่ง css อ้างถึง template ref ngModel
        -> ใช้ class text-danger ของ bootstrap แทนเลยง่ายๆ
    -> สามารถทำ multi show error ได้
        -> ใช้ property ของ ngModel errors
            -> errors สามารถดักได้หลายอย่างทั้ง
                -> ดัก error pattern validate ของ input
                -> ดัก error required validate ของ input
Note : attribute name หรือ id เอาไว้ ref ตัว element ใน Html (ถ้าเราใช้ ngModel binding แล้วไม่จำเป็นต้องใช้ name หรือ id ก็ได้) -> ในตัวอย่างเราใช้ name เพื่อให้ ngForm ref ถึง
    -> id -> ใช้ ref ถึง element บน html เพื่อให้มัน uniqe (access ผ่าน DOM)
    -> name -> ใช้ ref ถึง element เหมือนกันแต่เป็นในเชิงการส่ง data จาก client ไป server (จะเกี่ยวกับพวก form submit,Http GET POST)
        -> ex. ใน radio button เราใช้ id ให้แต่ละ option ตัวเลือก แต่เราใช้ name binding เป็นตัวเดียวกันหมดเพื่อเป็นตัวเก็บค่าที่ได้จากตัวเลือก radio button ที่จะ submit ใน form 
    -> template reference variable กับ id ต่างกัน
        -> template ref ใช้ binding data ของ element
        -> id ใช้ ref จัดการเกี่ยวกับ style css
- จัดการส่ง data ด้วยการ submit form
    -> post data to server
    -> receive response
    -> handle error

select validate
-> binding input select ให้เรียบร้อย
-> ใช้ attribute (blur) กับ (change) 
    -> blur คือการ ติ้กเข้าแล้วติ้กออก
    -> change คือเมื่อมีการเปลี่ยนค่าของ select
-> สร้าง flag กับ method มาจัดการ check กับตัว template ref ที่ ref ถึง ngModel
-> ใช้ flag มา check แทน property ngModel

ngForm form Property
- เอาไว้ check validate ของทั้ง form
- เอาไว้ set ค่า disable enable ปุ่ม submit ได้
Note : ngForm จะมี property form ที่มี property control ที่มี filed ทั้งหมดของ form ที่เป็น type formControl (สามารถ get state ต่างๆได้ไปลอง log ดู)

submit form data
- ใช้ attribute novalidate ให้ form (ใน Html5)
    -> novalidate => ใช้เพื่อบอก browser ว่าไม่ต้อง validate input เมื่อกด submit 
    Note : ปกติ browser มันจะ validate form ให้ auto อยู่แล้วเมื่อ กด submit(โชว์ message validate ใน browser บางเวอร์ชั่น)
        การที่เราใช้ attribute novalidation มันเป็นการปิด validation ของ browser เมื่อกด submit
        เพื่อที่จะมาใช้ custom validate ของเราเอง
- binding event submit (ngSubmit) ให้ form
    -> ส่ง ngForm ผ่าน template ref ไปที่ event submit เพื่อนำ data ไปใช้ต่อ
    -> ngForm ที่ส่งเข้าไปสามารถใช้ property ต่างๆได้ ex. value,พวก state
- ใช้ service มาช่วยในการส่ง data ไปที่ server

Error Hadling
-> ทำเหมือน handler error angular service


2.Reactive Form
- จัดการที่ class
- ไม่ใช้ two way binding
- เหมาะกับจัดการ data ที่ซับซ้อน

FormControl 
-> คือ filed data ใน form 1 ตัว
-> formControl = new FormControl(''); กำหนดค่าให้ field form ('' => เป็น default ไม่มีค่า)
FormGroup
-> คือ group ของ FormControl
-> formGroup = new FormGroup({
    formcon1 : new FormControl(''),
    formcon2 : new FormControl('')
    });

step
- สร้าง form html
- สร้าง form model (ใช้ formGroup กับ formControl)
    -> import { ReactiveFormsModule } from '@angular/forms';
    -> inject ใส่ imports ใน app.module
    -> สร้าง Model form ของ reactive form ด้วย formGroup,formControl
    -> binding formGroup,formControl ใน html 
        -[formGroup]="ชื่อ formGroup" -> binding ให้ form
        -formControlName="ชื่อ formControl" -> binding ให้ input
    Note : สามารถเอา formGroup ยัดใส่ใน formgroup ได้ แล้ว binding ด้วย attribute formGroupName (nested form group)
- จัดการ form control value 
    -> set value ให้ form -> ใช้ form.setValue(object value ที่ต้องการ set ที่ model ต้อง Match กับ Model ของ form) -> วิธีนี้ต้อง set value ให้ครบทุก field
    -> set patch คือ set ให้แค่บาง field -> ใช้ form.patchValue(object ของ field ที่เราต้องการ set)
- สามารถใช้ FormBuilder service (ในการสร้าง form model)
    -> ช่วยให้เวลาสร้าง formGroup , formControl จัดการง่าย code ไม่เยอะยุ่งยาก
        -> formGroup -> this.fb.group({})
        -> formControl -> this.fb.control('')
        -> formArray -> this.fb.array([])
    -> import { FormBuilder } from '@angular/forms'; 
    -> inject มาใช้ใน constructor
    -> this.fb.group({ -> formGroup 
        userName: ['Akuma'],    -> formControl 
        passWord: [''],         -> formControl
        confirmPassword: [''],  -> formControl
        address: this.fb.group({ -> formGroup
            City: [''],            -> formControl
            State: [''],           -> formControl
            PostalCode: ['']       -> formControl
        })
    });
    Note :
        userName : ['gunt',Validators.required] ตัวแรกใน array เป็น default value,ตัวที่ 2 เป็นเงื่อนไข validate(สามารถใส่ validation ได้มากกว่า 1 ตัว ทำเป็น validaiton array)
- จัดการ validate (จัดการที่ class แทนที่ view)
    -> import { Validators } from '@angular/forms'; 
    -> สร้างเงื่อนไขที่จะ validation form ให้กับ formControl แต่ละตัว
        -> สามารถจัดการเงื่อนไข validation ได้มากกว่า 1 
            ex. passWord: ['', [Validators.required,Validators.minLength(5)]] -> เงื่อนไข validate มากกว่า 1
            ex. passWord: ['', Validators.required] -> เงื่อนไข validation อันเดียว
        -> ดูตัวอย่างที่ app.component.html (ตอน binding check  property error ของ form)
    -> จัดการ show validation กับ error message
        -> class binding css ด้วยการ check property ของ reactive form
            - reactiveForm.get('ชื่อ filed').property -> ex. registrationForm.get('userName').invalid
            - สามารถทำเป็น Method เพื่อ get field ได้ (ทำให้ code ดู clean)
            ex.
            passWord() {
                return this.registrationForm.get('passWord');
            }
    -> custom validation (good practice) -> (ดูตัวอย่างที่ user-name-validator.ts)
        - สร้างไฟล์ที่จัดการเกี่ยวกับ validation 
        - สร้าง function ที่จัดการแล้ว export ออกไปใช้ที่ component class ที่อยากใช้ custom validation (validator function)
            -> รับ parameter แค่ 1 ตัว เป็น formControl (จัดการ check validate form control แค่ form control เดียว)
        - ตอน set validate เอาไปใส่ใน validation array ของ form control ที่เราจะ set
        - จัดการโชว์ errorMessage

Cross Field Validation (ดูตัวอย่างที่ password-validator.ts)
- ใช้ตอนที่ต้องการจะ compare value ของ formControl ที่อยู่ใน form Group เดียวกัน (จัดการ check validate form control มากกว่า 1 ตัว)
- ทำเหมือน custom validation
    -> ต่างกันตรงที่ parameter ไม่ได้รับมาเป็น form control เดี่ยวๆ แต่รับมาเป็น formGroup (มัน ref formGroup แทนจากที่เป็น formControl)
    -> ไม่ได้ set ที่ validation array ของ form control
        -> set ให้ formGroup แทน (set ให้เป็น argument ตัวที่ 2)
        -> set validator function สำหรับ cross field ให้ property validators ใน argument ตัวที่ 2 
- จัดการโชว์ errorMessage
Note :  การจัดการกับการโชว์ errorMessage ของ validator function ควรจัดการที่ function ที่เดียวจะดีกว่าไปจัดการที่ Html เพราะว่ามันง่ายต่อการ manage และ maintain code
    เนื่องจากเราจัดการ code แค่ที่เดียวแล้วไปใช้ต่อที่อื่นได้อีก ทำให้จัดการ code ได้ง่าย (clean code + readable)

Conditional Validation
- เป็น validation ที่จัดการกับเงื่อนไข validate ที่มันเฉพาะ
    ex. ถ้าไม่ตื้ก check box email field จะไม่ required แต่ถ้าติ้กจะ required

Dynamic Form Control (form array มาช่วยจัดการ dynamic form control)
step
    -> import {FormArray} from '@angular/forms'; 
    -> define form array ใน form model
        => ใน form array จะ contain form control
    -> define getter ที่ เข้าถึง form array เพื่อให้ html เข้าถึงได้ง่าย(ควรใส่ type assert ว่าเป็น FormArray ให้มันด้วย)
    -> สร้าง method ที่เอาไว้ add dynamic form control เข้าไปใน form array
    -> สร้าง button ที่ call method ข้างบน
    -> เอา form array มา show บน html
        -> binding form array => formArrayName="alternativeEmail"
        -> alternativeEmail.controls คือการ get array form control ของ form array 
        -> binding form control ใน form array ด้วย index ของ form control => [formControlName]="i"

Submitting Form Data
-> คือการ post form data ไปที่ server
-> binding event (ngSubmit) ให้กับ form
-> ใช้ service ในการติดต่อกับ server 